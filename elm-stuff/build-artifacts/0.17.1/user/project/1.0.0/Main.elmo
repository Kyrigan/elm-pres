var _user$project$Main$slide3 = function (t) {
	return _elm_lang$core$Native_List.fromArray(
		[
			A2(
			_user$project$GraphicSVG$move,
			{
				ctor: '_Tuple2',
				_0: 100 * _elm_lang$core$Basics$cos(t / 60),
				_1: -100 * _elm_lang$core$Basics$sin(t / 60)
			},
			A2(
				_user$project$GraphicSVG$filled,
				_user$project$GraphicSVG$blue,
				_user$project$GraphicSVG$circle(100)))
		]);
};
var _user$project$Main$slide2 = function (t) {
	return _elm_lang$core$Native_List.fromArray(
		[
			A2(
			_user$project$GraphicSVG$move,
			{
				ctor: '_Tuple2',
				_0: 200 * _elm_lang$core$Basics$cos(t / 80),
				_1: 100 * _elm_lang$core$Basics$sin(t / 80)
			},
			A2(
				_user$project$GraphicSVG$filled,
				_user$project$GraphicSVG$green,
				_user$project$GraphicSVG$circle(100)))
		]);
};
var _user$project$Main$slide1 = function (t) {
	return _elm_lang$core$Native_List.fromArray(
		[
			A2(
			_user$project$GraphicSVG$move,
			{
				ctor: '_Tuple2',
				_0: 100 * _elm_lang$core$Basics$cos(t / 100),
				_1: 100 * _elm_lang$core$Basics$sin(t / 100)
			},
			A2(
				_user$project$GraphicSVG$filled,
				_user$project$GraphicSVG$red,
				_user$project$GraphicSVG$circle(150))),
			A2(
			_user$project$GraphicSVG$filled,
			_user$project$GraphicSVG$white,
			_user$project$GraphicSVG$centered(
				A2(
					_user$project$GraphicSVG$customFont,
					'Helvetica',
					_user$project$GraphicSVG$bold(
						A2(
							_user$project$GraphicSVG$size,
							40,
							_user$project$GraphicSVG$text('Enter Title Here'))))))
		]);
};
var _user$project$Main$slides = _elm_lang$core$Array$fromList(
	_elm_lang$core$Native_List.fromArray(
		[_user$project$Main$slide1, _user$project$Main$slide2, _user$project$Main$slide3]));
var _user$project$Main$tranSin = F2(
	function (t, y) {
		return (_elm_lang$core$Native_Utils.cmp(t, 0) < 0) ? 0 : ((_elm_lang$core$Native_Utils.cmp(t / 100, _elm_lang$core$Basics$pi / 2) > 0) ? y : (_elm_lang$core$Basics$sin(t / 100) * y));
	});
var _user$project$Main$drawLine = F3(
	function (t, _p1, _p0) {
		var _p2 = _p1;
		var _p5 = _p2._1;
		var _p4 = _p2._0;
		var _p3 = _p0;
		return A2(
			_user$project$GraphicSVG$line,
			{ctor: '_Tuple2', _0: _p4, _1: _p5},
			{
				ctor: '_Tuple2',
				_0: _p4 + A2(_user$project$Main$tranSin, t, _p3._0 - _p4),
				_1: _p5 + A2(_user$project$Main$tranSin, t, _p3._1 - _p5)
			});
	});
var _user$project$Main$trans = F2(
	function (t, y) {
		return (_elm_lang$core$Native_Utils.cmp(t, 0) < 0) ? 0 : A2(_elm_lang$core$Basics$min, t, y);
	});
var _user$project$Main$fadeOut = F2(
	function (t, n) {
		return _user$project$GraphicSVG$makeTransparent(
			1 - A2(_user$project$Main$tranSin, t - n, 1));
	});
var _user$project$Main$fadeIn = F2(
	function (t, n) {
		return _user$project$GraphicSVG$makeTransparent(
			A2(_user$project$Main$tranSin, t - n, 1));
	});
var _user$project$Main$appear = F2(
	function (x, n) {
		return (_elm_lang$core$Native_Utils.cmp(x, n) > 0) ? _user$project$GraphicSVG$makeTransparent(1) : _user$project$GraphicSVG$makeTransparent(0);
	});
var _user$project$Main$loop = F2(
	function (t, n) {
		var y = _elm_lang$core$Basics$toFloat(
			_elm_lang$core$Basics$floor(t / n));
		return t - (y * n);
	});
var _user$project$Main$disappear = F2(
	function (x, n) {
		return (_elm_lang$core$Native_Utils.cmp(x, n) > 0) ? _user$project$GraphicSVG$makeTransparent(0) : _user$project$GraphicSVG$makeTransparent(1);
	});
var _user$project$Main$borders = _elm_lang$core$Native_List.fromArray(
	[
		A2(
		_user$project$GraphicSVG$move,
		{ctor: '_Tuple2', _0: 3000, _1: 0},
		A2(
			_user$project$GraphicSVG$filled,
			_user$project$GraphicSVG$white,
			A2(_user$project$GraphicSVG$rect, 5000, 5000))),
		A2(
		_user$project$GraphicSVG$move,
		{ctor: '_Tuple2', _0: -3000, _1: 0},
		A2(
			_user$project$GraphicSVG$filled,
			_user$project$GraphicSVG$white,
			A2(_user$project$GraphicSVG$rect, 5000, 5000))),
		A2(
		_user$project$GraphicSVG$move,
		{ctor: '_Tuple2', _0: 0, _1: 2750},
		A2(
			_user$project$GraphicSVG$filled,
			_user$project$GraphicSVG$white,
			A2(_user$project$GraphicSVG$rect, 5000, 5000))),
		A2(
		_user$project$GraphicSVG$move,
		{ctor: '_Tuple2', _0: 0, _1: -2750},
		A2(
			_user$project$GraphicSVG$filled,
			_user$project$GraphicSVG$white,
			A2(_user$project$GraphicSVG$rect, 5000, 5000)))
	]);
var _user$project$Main$default = function (t) {
	return _elm_lang$core$Native_List.fromArray(
		[]);
};
var _user$project$Main$update = F2(
	function (message, model) {
		var _p6 = message;
		switch (_p6.ctor) {
			case 'GameTick':
				var _p7 = _p6._1._0;
				return _elm_lang$core$Native_Utils.eq(
					_p7(_user$project$GraphicSVG$LeftArrow),
					_user$project$GraphicSVG$JustDown) ? _elm_lang$core$Native_Utils.update(
					model,
					{
						t: 0,
						idx: A2(_elm_lang$core$Basics$max, model.idx - 1, 0)
					}) : (_elm_lang$core$Native_Utils.eq(
					_p7(_user$project$GraphicSVG$RightArrow),
					_user$project$GraphicSVG$JustDown) ? _elm_lang$core$Native_Utils.update(
					model,
					{
						t: 0,
						idx: A2(
							_elm_lang$core$Basics$min,
							model.idx + 1,
							_elm_lang$core$Array$length(_user$project$Main$slides) - 1)
					}) : (_elm_lang$core$Native_Utils.eq(
					_p7(_user$project$GraphicSVG$Space),
					_user$project$GraphicSVG$JustDown) ? _elm_lang$core$Native_Utils.update(
					model,
					{
						p: _elm_lang$core$Basics$not(model.p)
					}) : (_elm_lang$core$Native_Utils.eq(
					_p7(_user$project$GraphicSVG$UpArrow),
					_user$project$GraphicSVG$JustDown) ? _elm_lang$core$Native_Utils.update(
					model,
					{
						a: A2(_elm_lang$core$Basics$min, model.a * 2, 4)
					}) : (_elm_lang$core$Native_Utils.eq(
					_p7(_user$project$GraphicSVG$DownArrow),
					_user$project$GraphicSVG$JustDown) ? _elm_lang$core$Native_Utils.update(
					model,
					{
						a: A2(_elm_lang$core$Basics$max, model.a / 2, 0.5)
					}) : (_elm_lang$core$Native_Utils.eq(
					_p7(
						_user$project$GraphicSVG$Key('R')),
					_user$project$GraphicSVG$JustDown) ? _elm_lang$core$Native_Utils.update(
					model,
					{r: 0 - model.r}) : (_elm_lang$core$Native_Utils.eq(
					_p7(_user$project$GraphicSVG$Backspace),
					_user$project$GraphicSVG$JustDown) ? _elm_lang$core$Native_Utils.update(
					model,
					{t: 0}) : (model.p ? model : _elm_lang$core$Native_Utils.update(
					model,
					{
						t: A2(_elm_lang$core$Basics$max, model.t + ((2.5 * model.a) * model.r), 0)
					}))))))));
			case 'NextSlide':
				return _elm_lang$core$Native_Utils.update(
					model,
					{
						t: 0,
						idx: A2(
							_elm_lang$core$Basics$min,
							model.idx + 1,
							_elm_lang$core$Array$length(_user$project$Main$slides) - 1)
					});
			default:
				return _elm_lang$core$Native_Utils.update(
					model,
					{
						t: 0,
						idx: A2(_elm_lang$core$Basics$max, model.idx - 1, 0)
					});
		}
	});
var _user$project$Main$init = {t: 0, idx: 0, p: false, r: 1, a: 1};
var _user$project$Main$LastSlide = {ctor: 'LastSlide'};
var _user$project$Main$NextSlide = {ctor: 'NextSlide'};
var _user$project$Main$detectors = _elm_lang$core$Native_List.fromArray(
	[
		A2(
		_user$project$GraphicSVG$notifyTap,
		_user$project$Main$NextSlide,
		A2(
			_user$project$GraphicSVG$makeTransparent,
			0.5,
			A2(
				_user$project$GraphicSVG$move,
				{ctor: '_Tuple2', _0: 450, _1: -200},
				_user$project$GraphicSVG$group(
					_elm_lang$core$Native_List.fromArray(
						[
							A2(
							_user$project$GraphicSVG$filled,
							_user$project$GraphicSVG$gray,
							_user$project$GraphicSVG$circle(40)),
							A2(
							_user$project$GraphicSVG$filled,
							_user$project$GraphicSVG$white,
							_user$project$GraphicSVG$triangle(30))
						]))))),
		A2(
		_user$project$GraphicSVG$notifyTap,
		_user$project$Main$LastSlide,
		A2(
			_user$project$GraphicSVG$makeTransparent,
			0.5,
			A2(
				_user$project$GraphicSVG$move,
				{ctor: '_Tuple2', _0: -450, _1: -200},
				A2(
					_user$project$GraphicSVG$rotate,
					_elm_lang$core$Basics$degrees(180),
					_user$project$GraphicSVG$group(
						_elm_lang$core$Native_List.fromArray(
							[
								A2(
								_user$project$GraphicSVG$filled,
								_user$project$GraphicSVG$gray,
								_user$project$GraphicSVG$circle(40)),
								A2(
								_user$project$GraphicSVG$filled,
								_user$project$GraphicSVG$white,
								_user$project$GraphicSVG$triangle(30))
							]))))))
	]);
var _user$project$Main$view = function (model) {
	var slide = A2(
		_elm_lang$core$Maybe$withDefault,
		_user$project$Main$default,
		A2(_elm_lang$core$Array$get, model.idx, _user$project$Main$slides));
	var t = model.t;
	return A3(
		_user$project$GraphicSVG$collage,
		1000,
		500,
		A2(
			_elm_lang$core$Basics_ops['++'],
			slide(t),
			A2(_elm_lang$core$Basics_ops['++'], _user$project$Main$borders, _user$project$Main$detectors)));
};
var _user$project$Main$GameTick = F2(
	function (a, b) {
		return {ctor: 'GameTick', _0: a, _1: b};
	});
var _user$project$Main$main = {
	main: A2(
		_user$project$GraphicSVG$gameApp,
		_user$project$Main$GameTick,
		{model: _user$project$Main$init, view: _user$project$Main$view, update: _user$project$Main$update})
};
